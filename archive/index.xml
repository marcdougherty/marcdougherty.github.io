<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Archives on Marc Dougherty</title><link>https://marcdougherty.com/archive/</link><description>Recent content in Archives on Marc Dougherty</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 17 Jul 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://marcdougherty.com/archive/index.xml" rel="self" type="application/rss+xml"/><item><title>Building Debian packages for my own use.</title><link>https://marcdougherty.com/archive/debian-packaging/</link><pubDate>Tue, 17 Jul 2018 00:00:00 +0000</pubDate><guid>https://marcdougherty.com/archive/debian-packaging/</guid><description>I&amp;rsquo;ve been a debian/ubuntu user for years, but had always been intimidated by the packaging process (because i tried to read the New Maintainer&amp;rsquo;s Guide ). I decided to give it a shot recently, because I was building experimental software for the raspberry pi, and grew tired for scp and rsync.
Note: The advice below does not abide by the debian packaging policy.
Vincent Bernat&amp;rsquo;s Pragmatic Debian Packaging is a great place to get started.</description></item><item><title>Vim and Arduino</title><link>https://marcdougherty.com/archive/vim-arduino/</link><pubDate>Tue, 16 Jan 2018 00:00:00 +0000</pubDate><guid>https://marcdougherty.com/archive/vim-arduino/</guid><description>TL;DR - I made a vim compiler plugin for arduino that parses errors into the quickfix list, and learned a bunch about the quickfix list and compiler plugins.
I&amp;rsquo;ve been working on several small arduino projects lately (mostly the series of bluetooth projects posted earlier). While I find the arduino toolchain easy to use, I&amp;rsquo;ve never enjoyed using the editor, or having to use the mouse to click the Verify and Upload buttons.</description></item><item><title>Bluetooth Part 1</title><link>https://marcdougherty.com/archive/bluetooth-pt1/</link><pubDate>Sat, 25 Nov 2017 00:00:00 +0000</pubDate><guid>https://marcdougherty.com/archive/bluetooth-pt1/</guid><description>I&amp;rsquo;ve recently become interested in bluetooth, specifically web-bluetooth, which is newly enabled in most chrome/firefox/opera browsers. It allows a web app (javascript) to interact with bluetooth devices near the web browser. Combine this with eddystone beacons and the bluetooth device is advertising a URL that links a user directly to an app to interact with the device.
Hardware and software # To play with bluetooth, the first thing I needed was a bluetooth radio.</description></item><item><title>Thermal Receipt printer experiments</title><link>https://marcdougherty.com/archive/thermal-printer/</link><pubDate>Fri, 30 Jun 2017 00:00:00 +0000</pubDate><guid>https://marcdougherty.com/archive/thermal-printer/</guid><description>I did not really need a thermal receipt printer, but i bought one anyway. Then i tried to make it useful.
Code on github The Basics # First, i followed the excellent tutorial from Adafruit (where i bought the printer). It covers all the initial setup stuff very well, and got me to a working printer that outputs simple text, with some basic text styling features (and other stuff like barcodes i did not expect to use).</description></item><item><title>Internet Volume Control</title><link>https://marcdougherty.com/archive/internet-volume/</link><pubDate>Thu, 22 Jun 2017 00:00:00 +0000</pubDate><guid>https://marcdougherty.com/archive/internet-volume/</guid><description>The Internet can be a very distracting place sometimes. There are so many sites (particularly social media) that demand our attention, and let us mindlessly scroll through photos and status updates, when we really want to be doing something else.
In an effort to aid my own concentration, I build a proof-of-concept Internet Volume Control that helps filter out some of the distraction.
All my work is up on github.com/muncus/internet-volume and the background / origin story is below.</description></item><item><title>Jam-O-Matic</title><link>https://marcdougherty.com/archive/jamomatic/</link><pubDate>Sat, 26 Dec 2015 00:00:00 +0000</pubDate><guid>https://marcdougherty.com/archive/jamomatic/</guid><description>Inspired by the Amazon Dash-style esp8266 IoT button , I built a button my distant family could use to request a refill of my home-made jam (though it could be used for anything). To keep with the theme, i built the whole thing to fit in a standard 8oz jam jar.
Unlike the inspiration, this button should be able to live for months in the pantry without power, so it needed a power switch.</description></item><item><title>Muni Displays</title><link>https://marcdougherty.com/archive/muni-displays/</link><pubDate>Mon, 24 Aug 2015 00:00:00 +0000</pubDate><guid>https://marcdougherty.com/archive/muni-displays/</guid><description>San Francisco&amp;rsquo;s Muni trains are not well known for their ability to be on time. Recent sfmta data shows a ~60% on-time rate (where &amp;ldquo;on-time&amp;rdquo; includes arriving anywhere between 1 minute before to 4 minutes after the intended time). Fortunately, they provide real-time arrival estimates with the Next Bus service. While the QuickMuni app does a great job of displaying this on my phone, I wanted to build a more &amp;ldquo;ambient&amp;rdquo; display, to help me decide when to leave in the morning.</description></item><item><title>Unicode (emoji) keyboard</title><link>https://marcdougherty.com/archive/unicode-keyboard/</link><pubDate>Tue, 21 Apr 2015 00:00:00 +0000</pubDate><guid>https://marcdougherty.com/archive/unicode-keyboard/</guid><description>Emoji keyboards on mobile devices have been in widespread use for a while, but I sometimes find myself using a computer, and have a hard time remembering the unicode identifiers for a nice cup of tea (1f375 - üçµ ) or a suitable warning character (2620 - ‚ò† ). So I decided to make a supplemental Unicode keyboard.
Code # The code can be found on Github: http://github.com/muncus/unicode-keyboard . User-servicable parts are in config.</description></item><item><title>Big Red Button</title><link>https://marcdougherty.com/archive/big-red-button/</link><pubDate>Thu, 01 Jan 2015 00:00:00 +0000</pubDate><guid>https://marcdougherty.com/archive/big-red-button/</guid><description>I was working on a particularly challenging service turndown, which involved handholding some user migrations. During the waiting periods, it occurred to me that turning off the service by simply typing the right command lacked a certain gravity.
So I grabbed a Bluefruit EZ-key (12-key programmable bluetooth keyboard), a big red arcade button, and a 9-volt battery. Using the adafruit intro docs , it was simple to get the button working.</description></item></channel></rss>